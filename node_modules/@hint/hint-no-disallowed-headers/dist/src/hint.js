"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const utils_debug_1 = require("@hint/utils-debug");
const utils_string_1 = require("@hint/utils-string");
const utils_network_1 = require("@hint/utils-network");
const utils_types_1 = require("@hint/utils-types");
const meta_1 = require("./meta");
const i18n_import_1 = require("./i18n.import");
const debug = utils_debug_1.debug(__filename);
class NoDisallowedHeadersHint {
    constructor(context) {
        let disallowedHeaders = [
            'public-key-pins',
            'public-key-pins-report-only',
            'x-aspnet-version',
            'x-aspnetmvc-version',
            'x-powered-by',
            'x-runtime',
            'x-version'
        ];
        let includeHeaders;
        let ignoreHeaders;
        const loadHintConfigs = () => {
            includeHeaders = (context.hintOptions && context.hintOptions.include) || [];
            ignoreHeaders = (context.hintOptions && context.hintOptions.ignore) || [];
            disallowedHeaders = utils_string_1.mergeIgnoreIncludeArrays(disallowedHeaders, ignoreHeaders, includeHeaders);
        };
        const serverHeaderContainsTooMuchInformation = (serverHeaderValue) => {
            const regex = [
                /\/?v?\d\.(\d+\.?)*/,
                /\(.*\)/,
                /(mod_|openssl|php)/
            ];
            return regex.some((r) => {
                return r.test(serverHeaderValue);
            });
        };
        const validate = ({ response, resource }) => {
            if (utils_network_1.isDataURI(resource)) {
                debug(`Check does not apply for data URI: ${resource}`);
                return;
            }
            const headers = utils_network_1.includedHeaders(response.headers, disallowedHeaders);
            const numberOfHeaders = headers.length;
            const serverHeaderValue = utils_network_1.normalizeHeaderValue(response.headers, 'server');
            const codeLanguage = 'http';
            if (!disallowedHeaders.includes('server') &&
                !utils_string_1.toLowerCaseArray(ignoreHeaders).includes('server') &&
                serverHeaderValue &&
                serverHeaderContainsTooMuchInformation(serverHeaderValue)) {
                const message = i18n_import_1.getMessage('headerValueShouldOnlyContain', context.language);
                context.report(resource, message, {
                    codeLanguage,
                    codeSnippet: `Server: ${serverHeaderValue}`,
                    severity: utils_types_1.Severity.warning
                });
            }
            if (numberOfHeaders > 0) {
                const message = i18n_import_1.getMessage('disallowedHeaders', context.language, headers.join(', '));
                const codeSnippet = headers.reduce((total, header) => {
                    return `${total}${total ? '\n' : ''}${header}: ${utils_network_1.normalizeHeaderValue(response.headers, header)}`;
                }, '');
                context.report(resource, message, {
                    codeLanguage, codeSnippet,
                    severity: utils_types_1.Severity.warning
                });
            }
        };
        loadHintConfigs();
        context.on('fetch::end::*', validate);
    }
}
exports.default = NoDisallowedHeadersHint;
NoDisallowedHeadersHint.meta = meta_1.default;
